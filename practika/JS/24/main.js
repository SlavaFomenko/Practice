console.log(Boolean(NaN)); // false Потому что преобразование NaN в логическое значение всегда дает результат false.
console.log(Boolean(1)); // true  1 при преобразовании в логический тип данных даст true
console.log(Boolean(" "));// true  не пустая строка при преобразовании в логический тип данных даст true
console.log(Boolean(null)); //false  null при преобразовании в логический тип данных даст false
console.log(Boolean(undefined));//false  undefiend при преобразовании в логический тип данных даст false
console.log(true + false); // 1 Когда оператор + применяется к операндам типа boolean, они сначала преобразуются в числа: true становится 1, а false становится 0
console.log("8" / "2");  // 4 строки при делении преобразовыва/ься в числа
console.log("number" + 5 + 1); // number51 ипользуется конкатенация
console.log(7 && 9); // 9 так как оба true и оператор && вернул полседнюю правду (9)
console.log(null + 1); // 1 Когда оператор + применяется к операндам, одним из которых является null, null будет преобразован в число. В результате этого преобразования null становится 0.
console.log(undefined + 1); // NaN Когда оператор + применяется к операндам, одним из которых является undefined, undefined будет преобразован в значение NaN
console.log("five" + +"two"); // fiveNaN Оператор + перед "two" является унарным оператором плюс, который пытается преобразовать строку в число. В результате такого преобразования получается значение NaN 
console.log(null == ''); //false по спецификации JavaScript, сравнение null с пустой строкой при использовании оператора == дает результат false.
console.log("2" > "12"); // true правнивается юникод
console.log("Артем" > "Артур");// false правнивается юникод
console.log(2 > "12"); // false преобразование в строку ('12')
console.log(1 > false); // true преобразование к логическому типу данныъ(1)
console.log(undefined == null);// true В JavaScript при использовании оператора ==, сравнение undefined и null дает результат true. Это является одним из исключений в правилах преобразования типов и сравнения в JavaScript.
console.log(null == "0"); // false Правила преобразования типов говорят о том, что при сравнении null с любым значением, кроме undefined и самого null, результатом будет false.
console.log('7px' - 4);// nan '7px' не может быть преобразовано в число, операция вычитания приведет к результату NaN
console.log(Number.parseInt('7px') - 4);// 3 parseInt вернуло число 7 
console.log(0 || "0" && 1); // 1 В данном случае, оператор && имеет более высокий приоритет, поэтому сначала выполняется выражение "0" && 1. Оба операнда являются истинными значениями, поскольку строка "0" не является пустой и число 1 не равно нулю. Таким образом, результатом выражения "0" && 1 будет 1.Затем выполняется выражение 0 || 1. Оператор || возвращает первый истинный операнд. В данном случае, 0 является ложным значением, а 1 - истинным. Поэтому результатом выражения 0 || 1 будет 1.
console.log(5 + 1 + "number"); //6number сначала конкатенация
console.log(7 && 2); // 2 оператор && возвращает либо первую ложь либо последнюю правду
console.log(2 && 7);// 7 оператор && возвращает либо первую ложь либо последнюю правду
console.log('true' == true); // false Тому що "true"перетворюється на NaN, а trueперетворюється на 1.
console.log(false == 'false');//false Тому що "false"перетворюється на NaN, а false перетворюється на 0.
console.log(!!"false" == !!"true"); // true !!Преобразовал строки в true
console.log(5 > 4); // true 5 больше чем 4 (сравниваются тип намюер)
console.log("ананас" > "яблоко");// false юникод сравнивается 
console.log(null === +"0"); //  false сравниваются типи данных
console.log(null || 2 || undefined); // 2 оператор "||" возвращает первый истинный операнд, результатом будет 2.
console.log(1 && null && 2); // null оператор возвращает первую ложь
console.log(null || 2 && 3 || 4); // 3 (2и3 = 3 (3или4 = 3)(null или 3 = 3))
console.log("" || null || 1 || 2); //1 ('' или null = null) => (1 или 2= 1)=>(null или 1 = 1)(||  или вовращеет последий фолс или первый тру)
console.log(!false); // true оператор ! false преобразовал в true
console.log(!"строка");// false оператор ! true преобразовал в false
console.log(!0); //true оператор ! false преобразовал в true
console.log(!NaN);// true NaN возвращает false ! преобразоавывает в true 
console.log(!""); //true пустая строка возращает false ! преобразоавывает в true 
console.log(!777); // false число вернуло true преобразовало в false 
console.log(!null);//true оператор ! false преобразовал в true